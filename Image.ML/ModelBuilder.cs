// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using Image.ML.Model;
using Microsoft.ML;
using Microsoft.ML.Data;
// ReSharper disable PossibleMultipleEnumeration

namespace Image.ML
{
    public static class ModelBuilder
    {
        //private static readonly string __TrainDataFilepath = Path.Combine(Path.GetTempPath(), "f50e25cb-49c2-4535-b875-e870098a3a00.tsv");
        private static readonly string __TrainDataFilepath = "SamplesData.tsv";
        private static readonly string __ModelFile = ConsumeModel.MLNetModelPath;

        // Create MLContext to be shared across the model creation workflow objects 
        // Set a random seed for repeatable/deterministic results across multiple trainings.
        private static readonly MLContext __MlContext = new(seed: 1);

        public static void CreateModel()
        {
            // Load Data
            var training_data_view = __MlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: __TrainDataFilepath,
                                            hasHeader: true,
                                            separatorChar: '\t',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Build training pipeline
            var training_pipeline = BuildTrainingPipeline(__MlContext);

            // Train Model
            var ml_model = TrainModel(__MlContext, training_data_view, training_pipeline);

            // Evaluate quality of Model
            Evaluate(__MlContext, training_data_view, training_pipeline);

            // Save model
            SaveModel(__MlContext, ml_model, __ModelFile, training_data_view.Schema);
        }

        public static IEstimator<ITransformer> BuildTrainingPipeline(MLContext MlContext)
        {
            // Data process configuration with pipeline data transformations 
            var data_process_pipeline = MlContext.Transforms.Conversion
                .MapValueToKey("Label", "Label")
                .Append(MlContext.Transforms.LoadRawImageBytes("ImageSource_featurized", null, "ImageSource"))
                .Append(MlContext.Transforms.CopyColumns("Features", "ImageSource_featurized"));

            // Set the training algorithm 
            var trainer = MlContext.MulticlassClassification.Trainers
                .ImageClassification(labelColumnName: @"Label", featureColumnName: "Features")
                .Append(MlContext.Transforms.Conversion.MapKeyToValue("PredictedLabel", "PredictedLabel"));

            var training_pipeline = data_process_pipeline.Append(trainer);

            return training_pipeline;
        }

        public static ITransformer TrainModel(MLContext MlContext, IDataView TrainingDataView, IEstimator<ITransformer> TrainingPipeline)
        {
            Console.WriteLine("=============== Training  model ===============");

            var model = TrainingPipeline.Fit(TrainingDataView);

            Console.WriteLine("=============== End of training process ===============");
            return model;
        }

        private static void Evaluate(MLContext MlContext, IDataView TrainingDataView, IEstimator<ITransformer> TrainingPipeline)
        {
            // Cross-Validate with single dataset (since we don't have two datasets, one for training and for evaluate)
            // in order to evaluate and get the model's accuracy metrics
            Console.WriteLine("=============== Cross-validating to get model's accuracy metrics ===============");
            var cross_validation_results = MlContext.MulticlassClassification.CrossValidate(TrainingDataView, TrainingPipeline, numberOfFolds: 5, labelColumnName: "Label");
            PrintMulticlassClassificationFoldsAverageMetrics(cross_validation_results);
        }

        private static void SaveModel(MLContext MlContext, ITransformer MlModel, string ModelRelativePath, DataViewSchema ModelInputSchema)
        {
            // Save/persist the trained model to a .ZIP file
            Console.WriteLine($"=============== Saving the model  ===============");
            MlContext.Model.Save(MlModel, ModelInputSchema, GetAbsolutePath(ModelRelativePath));
            Console.WriteLine("The model is saved to {0}", GetAbsolutePath(ModelRelativePath));
        }

        public static string GetAbsolutePath(string RelativePath)
        {
            var data_root = new FileInfo(typeof(Program).Assembly.Location);
            var assembly_folder_path = data_root.Directory!.FullName;

            var full_path = Path.Combine(assembly_folder_path, RelativePath);

            return full_path;
        }

        public static void PrintMulticlassClassificationMetrics(MulticlassClassificationMetrics metrics)
        {
            Console.WriteLine($"************************************************************");
            Console.WriteLine($"*    Metrics for multi-class classification model   ");
            Console.WriteLine($"*-----------------------------------------------------------");
            Console.WriteLine($"    MacroAccuracy = {metrics.MacroAccuracy:0.####}, a value between 0 and 1, the closer to 1, the better");
            Console.WriteLine($"    MicroAccuracy = {metrics.MicroAccuracy:0.####}, a value between 0 and 1, the closer to 1, the better");
            Console.WriteLine($"    LogLoss = {metrics.LogLoss:0.####}, the closer to 0, the better");
            for (var i = 0; i < metrics.PerClassLogLoss.Count; i++)
            {
                Console.WriteLine($"    LogLoss for class {i + 1} = {metrics.PerClassLogLoss[i]:0.####}, the closer to 0, the better");
            }
            Console.WriteLine($"************************************************************");
        }

        public static void PrintMulticlassClassificationFoldsAverageMetrics(IEnumerable<TrainCatalogBase.CrossValidationResult<MulticlassClassificationMetrics>> CrossValResults)
        {
            var metrics_in_multiple_folds = CrossValResults.Select(r => r.Metrics);

            var micro_accuracy_values = metrics_in_multiple_folds.Select(m => m.MicroAccuracy);
            var micro_accuracy_average = micro_accuracy_values.Average();
            var micro_accuracies_std_deviation = CalculateStandardDeviation(micro_accuracy_values);
            var micro_accuracies_confidence_interval95 = CalculateConfidenceInterval95(micro_accuracy_values);

            var macro_accuracy_values = metrics_in_multiple_folds.Select(m => m.MacroAccuracy);
            var macro_accuracy_average = macro_accuracy_values.Average();
            var macro_accuracies_std_deviation = CalculateStandardDeviation(macro_accuracy_values);
            var macro_accuracies_confidence_interval95 = CalculateConfidenceInterval95(macro_accuracy_values);

            var log_loss_values = metrics_in_multiple_folds.Select(m => m.LogLoss);
            var log_loss_average = log_loss_values.Average();
            var log_loss_std_deviation = CalculateStandardDeviation(log_loss_values);
            var log_loss_confidence_interval95 = CalculateConfidenceInterval95(log_loss_values);

            var log_loss_reduction_values = metrics_in_multiple_folds.Select(m => m.LogLossReduction);
            var log_loss_reduction_average = log_loss_reduction_values.Average();
            var log_loss_reduction_std_deviation = CalculateStandardDeviation(log_loss_reduction_values);
            var log_loss_reduction_confidence_interval95 = CalculateConfidenceInterval95(log_loss_reduction_values);

            Console.WriteLine($"*************************************************************************************************************");
            Console.WriteLine($"*       Metrics for Multi-class Classification model      ");
            Console.WriteLine($"*------------------------------------------------------------------------------------------------------------");
            Console.WriteLine($"*       Average MicroAccuracy:    {micro_accuracy_average:0.###}  - Standard deviation: ({micro_accuracies_std_deviation:#.###})  - Confidence Interval 95%: ({micro_accuracies_confidence_interval95:#.###})");
            Console.WriteLine($"*       Average MacroAccuracy:    {macro_accuracy_average:0.###}  - Standard deviation: ({macro_accuracies_std_deviation:#.###})  - Confidence Interval 95%: ({macro_accuracies_confidence_interval95:#.###})");
            Console.WriteLine($"*       Average LogLoss:          {log_loss_average:#.###}  - Standard deviation: ({log_loss_std_deviation:#.###})  - Confidence Interval 95%: ({log_loss_confidence_interval95:#.###})");
            Console.WriteLine($"*       Average LogLossReduction: {log_loss_reduction_average:#.###}  - Standard deviation: ({log_loss_reduction_std_deviation:#.###})  - Confidence Interval 95%: ({log_loss_reduction_confidence_interval95:#.###})");
            Console.WriteLine($"*************************************************************************************************************");

        }

        public static double CalculateStandardDeviation(IEnumerable<double> values)
        {
            var average = values.Average();
            var sum_of_squares_of_differences = values.Select(val => (val - average) * (val - average)).Sum();
            var standard_deviation = Math.Sqrt(sum_of_squares_of_differences / (values.Count() - 1));
            return standard_deviation;
        }

        public static double CalculateConfidenceInterval95(IEnumerable<double> values)
        {
            var confidence_interval95 = 1.96 * CalculateStandardDeviation(values) / Math.Sqrt((values.Count() - 1));
            return confidence_interval95;
        }
    }
}
